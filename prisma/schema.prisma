// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//generator client {
  //provider = "prisma-client-js"
//}

//datasource db {
  //provider = "mysql"
 // url      = env("DATABASE_URL")
//}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}
enum tipo {
  Armazem
  Loja
}


model clientes {
  id String @id @default(uuid())
  numeroContribuinte String?
  nomeCliente String?
  moradaCliente String?
  telefoneCliente String?
  emailCliente String?
  vendas vendas[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model funcoes {
	id String @id @default(uuid())
  nome String
  descricao String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  funcoesPermissoes funcoesPermissoes[]
  funcionarios funcionarios[]
}

model permissoes {
	id String @id @default(uuid())
  nome String
  descricao String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  funcoesPermissoes funcoesPermissoes[]
}

model funcoesPermissoes {
  id String @id @default(uuid())
	id_funcao String
  id_permissao String
  funcoes funcoes @relation(fields: [id_funcao], references: [id],onDelete: Cascade, onUpdate: Cascade)
  Permissoes permissoes @relation(fields: [id_permissao], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model funcionarios {
	id String @id @default(uuid())
  id_funcao String?
  numeroBI String
  nomeFuncionario String
  senha String
  moradaFuncionario String
  telefoneFuncionario String
  emailFuncionario String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  EntradasEstoque entradasEstoque[]
  transferencias transferencias[]
  codigoRecuperacao codigoRecuperacao[]
  funcionariosCaixa funcionariosCaixa[]
  funcionariosTarefas funcionariosTarefas[]
  funcoes funcoes? @relation(fields: [id_funcao], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
model tarefas {
  id String @id @default(uuid())
  nome String
  descricao String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  funcionariosTarefas funcionariosTarefas[]
}
model funcionariosTarefas {
  id String @id @default(uuid())
  id_funcionario String
  id_tarefa String
  status String
  funcionarios funcionarios @relation(fields: [id_funcionario], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tarefas tarefas @relation(fields: [id_tarefa], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model categoriasProdutos{
  id String @id @default(uuid())
  nomeCategoria String
  descricao String?
  
  produtos produtos[]
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model produtos {
	id String @id @default(uuid())
  id_categoriaProduto String
  referenciaProduto String
  nomeProduto String
  precoVenda Decimal @db.Decimal(10 , 2)
  quantidadePorUnidade Int
  unidadeMedida String?
  unidadeConteudo String?
  EntradasEstoque entradasEstoque[]
  produtosLocalizacoes produtosLocalizacoes[]
  alertas alertas[]
  transferencias transferencias[]
  vendasProdutos vendasProdutos[]
  estoques estoques[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  categoriasProdutos categoriasProdutos @relation(fields: [id_categoriaProduto], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
model estoques {
  id String @id @default(uuid())
  id_produto String
  quantidadeAtual Int
  lote String
  dataValidadeLote DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  produtos produtos @relation(fields: [id_produto], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model fornecedores {
  id String @id @default(uuid())
  nif String
  nomeFornecedor String
  moradaFornecedor String
  telefoneFornecedor Int
  emailFornecedor String

  EntradasEstoque entradasEstoque[]
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
model codigoRecuperacao {
  id            String       @id @default(uuid())
  codigo        String
  id_funcionario String
  expiresAt     DateTime
  funcionarios   funcionarios @relation(fields: [id_funcionario], references: [id])
}
model entradasEstoque {
  id String @id @default(uuid())
	id_fornecedor String
  id_produto String
  id_funcionario String
  adicionado Boolean
  quantidadeRecebida Int
  dataEntrada DateTime
  custoUnitario Decimal  @db.Decimal(10 , 2)
  lote String
  dataValidadeLote DateTime

  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  Fornecedores fornecedores @relation(fields: [id_fornecedor], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Produtos produtos @relation(fields: [id_produto], references: [id], onDelete: Cascade, onUpdate: Cascade)
  funcionarios funcionarios @relation(fields: [id_funcionario], references: [id], onDelete: Cascade, onUpdate: Cascade)

}
model caixas {
	id String @id @default(uuid())
  nomeCaixa String
  descricao String?
  mac String?
  funcionariosCaixa funcionariosCaixa []
  alertas alertas[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

}

model vendas {
	id String @id @default(uuid())
  id_cliente String?
  id_funcionarioCaixa String
  numeroDocumento String
  dataEmissao DateTime
  dataValidade DateTime
  metodoPagamento String?
  valorTotal Decimal @db.Decimal(10, 2)
  clientes clientes? @relation(fields: [id_cliente], references: [id], onDelete: Cascade, onUpdate: Cascade)
  funcionariosCaixa funcionariosCaixa @relation(fields: [id_funcionarioCaixa], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendasProdutos vendasProdutos[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
model vendasProdutos {
  id String @id @default(uuid())
  id_produto String
  id_venda String
  quantidadeVendida Int
  produtos produtos @relation(fields: [id_produto], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendas vendas @relation(fields: [id_venda], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model seccoes {
	id String @id @default(uuid())
  nomeSeccao String
  descricao String?
  
  produtosLocalizacoes produtosLocalizacoes[]


  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model corredores {
	id String @id @default(uuid())
  nomeCorredor String
  descricao String?

  produtosLocalizacoes produtosLocalizacoes[]


  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model prateleiras {
	id String @id @default(uuid())
  nomePrateleira String
  descricao String?

  produtosLocalizacoes produtosLocalizacoes[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model localizacoes {
	id String @id @default(uuid())
  nomeLocalizacao String
  descricao String?
  tipo tipo?
  produtosLocalizacoes produtosLocalizacoes[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model produtosLocalizacoes {
  id String @id @default(uuid())
	id_produto String 
  id_localizacao String
  id_seccao String
  id_prateleira String
  id_corredor String
  lote String?
  dataValidadeLote DateTime?
  quantidadeProduto Int
  quantidadeMinimaProduto Int
  transferencias transferencias[]
  produtos produtos @relation(fields: [id_produto], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Localizacoes localizacoes @relation(fields: [id_localizacao], references: [id],onDelete: Cascade, onUpdate: Cascade)
  seccoes seccoes @relation(fields: [id_seccao],references: [id],onDelete: Cascade, onUpdate: Cascade )
  prateleiras prateleiras @relation(fields: [id_prateleira], references: [id],onDelete: Cascade, onUpdate: Cascade)
  corredores corredores @relation(fields: [id_corredor], references: [id],onDelete: Cascade, onUpdate: Cascade)
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model transferencias {
	id String @id @default(uuid())
  id_produto String
  id_funcionario String
  id_produtoLocalizacao String
  dataTransferencia DateTime
  quantidadeTransferida Int
  funcionarios funcionarios @relation(fields: [id_funcionario], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Produtos produtos @relation(fields: [id_produto], references: [id],onDelete: Cascade, onUpdate: Cascade)
  produtosLocalizacoes produtosLocalizacoes @relation(fields: [id_produtoLocalizacao], references: [id],onDelete: Cascade, onUpdate: Cascade)
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model funcionariosCaixa {
  id String @id @default(uuid())
	id_caixa String
  id_funcionario String
  estadoCaixa Boolean
  quantidadaFaturada Decimal @db.Decimal(10, 2)
  valorInicial Decimal? @db.Decimal(10, 2)
  horarioAbertura DateTime
  horarioFechamento DateTime?
  caixas caixas @relation(fields: [id_caixa], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Funcionarios funcionarios @relation(fields: [id_funcionario], references: [id],onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  vendas vendas[]
}

model alertas {
	id String @id @default(uuid())
  id_caixa String
  id_produto String
  nomeAlerta String
  descricao String?
  caixas caixas @relation(fields: [id_caixa], references: [id],onDelete: Cascade, onUpdate: Cascade)
  produtos produtos @relation(fields: [id_produto], references: [id],onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
