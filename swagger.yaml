openapi: 3.0.0
info:
  title: API do Sistema de Gerenciamento
  version: 1.0.0
  description: |-
    Documentação completa da API para o sistema de gerenciamento.
    Inclui todos os endpoints para todas as entidades do sistema.

servers:
  - url: http://localhost:3000
    description: Servidor de desenvolvimento local

tags:
  - name: Autenticação
    description: Endpoints para login e autenticação
  - name: Clientes
    description: Gerenciamento de clientes
  - name: Produtos
    description: Gerenciamento de produtos
  - name: Estoque
    description: Operações de estoque
  - name: Vendas
    description: Processamento de vendas
  - name: Funcionários
    description: Gerenciamento de funcionários
  - name: Tarefas
    description: Gerenciamento de tarefas
  # Adicione outras tags conforme necessário para cada entidade

paths:
  /login:
    post:
      tags: [Autenticação]
      summary: Autentica um usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, senha]
              properties:
                email:
                  type: string
                  format: email
                senha:
                  type: string
                  format: password
              example:
                email: admin@example.com
                senha: senha123
      responses:
        "200":
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  usuario:
                    $ref: "#/components/schemas/Usuario"
        "401":
          description: Credenciais inválidas
        "400":
          description: Dados inválidos

  /cliente:
    get:
      tags: [Clientes]
      summary: Lista todos os clientes
      responses:
        "200":
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cliente"
    post:
      tags: [Clientes]
      summary: Cria um novo cliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClienteInput"
      responses:
        "201":
          description: Cliente criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cliente"
        "400":
          description: Dados inválidos

  /cliente/{id}:
    get:
      tags: [Clientes]
      summary: Obtém um cliente pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do cliente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cliente"
        "404":
          description: Cliente não encontrado
    put:
      tags: [Clientes]
      summary: Atualiza um cliente
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClienteInput"
      responses:
        "200":
          description: Cliente atualizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cliente"
        "404":
          description: Cliente não encontrado
        "400":
          description: Dados inválidos
    delete:
      tags: [Clientes]
      summary: Remove um cliente
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Cliente removido
        "404":
          description: Cliente não encontrado

  # Padrão para todas as outras rotas (repetir o mesmo padrão para cada entidade)
  /produto:
    get:
      tags: [Produtos]
      summary: Lista todos os produtos
      responses:
        "200":
          description: Lista de produtos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Produto"
    post:
      tags: [Produtos]
      summary: Cria um novo produto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProdutoInput"
      responses:
        "201":
          description: Produto criado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Produto"
        "400":
          description: Dados inválidos

  /produto/{id}:
    get:
      tags: [Produtos]
      summary: Obtém um produto pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do produto
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Produto"
        "404":
          description: Produto não encontrado
    put:
      tags: [Produtos]
      summary: Atualiza um produto
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProdutoInput"
      responses:
        "200":
          description: Produto atualizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Produto"
        "404":
          description: Produto não encontrado
        "400":
          description: Dados inválidos
    delete:
      tags: [Produtos]
      summary: Remove um produto
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Produto removido
        "404":
          description: Produto não encontrado

  # Continuar com o mesmo padrão para todas as outras rotas...
  # /estoque, /tarefa, /funcionario, etc...

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: string
        nome:
          type: string
        email:
          type: string
          format: email
        funcao:
          type: string
      example:
        id: 1
        nome: Admin
        email: admin@example.com
        funcao: ADMIN

    Cliente:
      type: object
      properties:
        id:
          type: string
        nome:
          type: string
        email:
          type: string
          format: email
        telefone:
          type: string
        endereco:
          type: string
        dataNascimento:
          type: string
          format: date
      example:
        id: 1
        nome: João Silva
        email: joao@example.com
        telefone: "(11) 99999-9999"
        endereco: "Rua Exemplo, 123"
        dataNascimento: "1990-01-01"

    ClienteInput:
      type: object
      required: [nome, email]
      properties:
        nome:
          type: string
        email:
          type: string
          format: email
        telefone:
          type: string
        endereco:
          type: string
        dataNascimento:
          type: string
          format: date
      example:
        nome: João Silva
        email: joao@example.com
        telefone: "(11) 99999-9999"
        endereco: "Rua Exemplo, 123"
        dataNascimento: "1990-01-01"

    Produto:
      type: object
      properties:
        id:
          type: string
        nome:
          type: string
        descricao:
          type: string
        preco:
          type: number
          format: float
        quantidadeEstoque:
          type: integer
        categoria:
          $ref: "#/components/schemas/CategoriaProduto"
      example:
        id: 1
        nome: "Produto Exemplo"
        descricao: "Descrição do produto"
        preco: 99.99
        quantidadeEstoque: 100
        categoria:
          id: 1
          nome: "Eletrônicos"

    ProdutoInput:
      type: object
      required: [nome, preco]
      properties:
        nome:
          type: string
        descricao:
          type: string
        preco:
          type: number
          format: float
        quantidadeEstoque:
          type: integer
        categoriaId:
          type: integer
      example:
        nome: "Produto Exemplo"
        descricao: "Descrição do produto"
        preco: 99.99
        quantidadeEstoque: 100
        categoriaId: 1

    CategoriaProduto:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        descricao:
          type: string
      example:
        id: 1
        nome: "Eletrônicos"
        descricao: "Produtos eletrônicos"

    # Adicionar schemas para todas as outras entidades...
    # Funcionario, Tarefa, Estoque, Venda, etc...

security:
  - bearerAuth: []
